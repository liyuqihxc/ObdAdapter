# https://gist.github.com/kbumsik/52ce3f41a62f2485c3da1a585674e550
cmake_minimum_required(VERSION 3.0)
set(PROJECT_NAME "ObdII_Adapter_Firmware")
project(${PROJECT_NAME})

# All relative to project root, as generated by STM32CubeMX.
set(SOURCE_DIR ${CMAKE_SOURCE_DIR}/src)
set(CORE_DIR ${CMAKE_SOURCE_DIR}/Core)
set(CMSIS_DIR ${CMAKE_SOURCE_DIR}/Drivers/CMSIS)
set(DEVICE_DIR ${CMAKE_SOURCE_DIR}/Drivers/CMSIS/Device/ST/STM32F1xx)
set(HAL_DIR ${CMAKE_SOURCE_DIR}/Drivers/STM32F1xx_HAL_Driver)

# Look here for header files.
include_directories(${CORE_DIR}/Inc)
include_directories(${CMSIS_DIR}/Include)
include_directories(${DEVICE_DIR}/Include)
include_directories(${HAL_DIR}/Inc)

# For diagnostic tools like rtags.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Compile and link
set(CMAKE_C_FLAGS "-O0 -g -Wall -ffunction-sections -fdata-sections")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSTM32F103xB -mcpu=cortex-m3 -mthumb")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mno-thumb-interwork -mfpu=vfp -msoft-float")
set(CMAKE_EXE_LINKER_FLAGS "-T../STM32F103C8Tx_FLASH.ld -Wl,--gc-section")

# Some trickery to get CMake to deal with our assembler code.
set_property(SOURCE ${DEVICE_DIR}/Source/Templates/gcc/startup_stm32f103xb.s PROPERTY LANGUAGE C)

# The linker flag --gc-section keeps unused object code here from being linked.
add_executable(${PROJECT_NAME}.elf
  ${CMAKE_SOURCE_DIR}/src/main.cc
  ${CORE_DIR}/Src/main.c
  ${CORE_DIR}/Src/stm32f1xx_it.c
  ${CORE_DIR}/Src/system_stm32f1xx.c
  ${CMAKE_SOURCE_DIR}/startup_stm32f103xb.s
  ${HAL_DIR}/Src/stm32f1xx_hal.c
  ${HAL_DIR}/Src/stm32f1xx_hal_cortex.c
  ${HAL_DIR}/Src/stm32f1xx_hal_dma.c
  ${HAL_DIR}/Src/stm32f1xx_hal_flash.c
  ${HAL_DIR}/Src/stm32f1xx_hal_flash_ex.c
  ${HAL_DIR}/Src/stm32f1xx_hal_gpio.c
  ${HAL_DIR}/Src/stm32f1xx_hal_i2c.c
  ${HAL_DIR}/Src/stm32f1xx_hal_pwr.c
  ${HAL_DIR}/Src/stm32f1xx_hal_rcc.c
  ${HAL_DIR}/Src/stm32f1xx_hal_rcc_ex.c
  ${HAL_DIR}/Src/stm32f1xx_hal_tim.c
  ${HAL_DIR}/Src/stm32f1xx_hal_tim_ex.c
)

# Generate assembly listing.
add_custom_command(
  TARGET ${PROJECT_NAME}.elf
  COMMAND "arm-none-eabi-objdump"
  ARGS "-S" "${PROJECT_NAME}.elf" ">>" "${PROJECT_NAME}.lst"
)

# Flash firmware to target.
add_custom_target(flash
  openocd -f interface/stlink-v2-1.cfg -c "transport select hla_swd"
  -f target/stm32f0x.cfg -c "init" -c "reset halt"
  -c "flash write_image erase ${PROJECT_NAME}.elf" -c "reset run" -c "shutdown"
  DEPENDS ${PROJECT_NAME}.elf
  COMMENT "Flashing target hardware")

# Run OpenOCD as a GDB host.
add_custom_target(gdbhost
  openocd -f interface/stlink-v2-1.cfg -c "transport select hla_swd"
  -f target/stm32f0x.cfg -c "init" -c "reset halt"
  DEPENDS ${PROJECT_NAME}.elf
  COMMENT "Running OpenOCD as a GDB host.")
